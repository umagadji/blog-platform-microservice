spring.application.name=user-service

#PostgreSQL (variables for work in Docker)
#spring.datasource.url=jdbc:postgresql://localhost:5432/user_service_db
#spring.datasource.username=postgres
#spring.datasource.password=admin
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# Hibernate
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# Logging
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# Pull
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=2
spring.datasource.hikari.idle-timeout=30000
spring.datasource.hikari.max-lifetime=1800000

logging.level.org.springframework.security=DEBUG

# ========================
# Конфигурация Kafka
# ========================
# Адрес Kafka-брокера (в данном случае, это контейнер Kafka, работающий на порту 9092)
spring.kafka.bootstrap-servers=kafka:9092

# ========================
# Конфигурация Consumer (Потребитель)
# ========================
# Группа потребителей, к которой относится данный сервис (например, user-service)
spring.kafka.consumer.group-id=user-service-group

# Указывает, что consumer начнёт читать сообщения с самого начала, если нет сохранённого смещения
spring.kafka.consumer.auto-offset-reset=earliest

## Десериализация ключа сообщений (используется String для ключа)
#spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#
## Десериализация значения сообщений (используется String для значения)
#spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#
## ========================
## Конфигурация Producer (Отправитель)
## ========================
## Сериализация ключа сообщений (используется String для ключа)
#spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#
## Сериализация значения сообщений (используется String для значения)
#spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

