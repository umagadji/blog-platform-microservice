spring.application.name=like-service

#PostgreSQL (variables for work in Docker)
#spring.datasource.url=jdbc:postgresql://localhost:5432/post_service_db
#spring.datasource.username=postgres
#spring.datasource.password=admin
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# Hibernate
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# Logging
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# Pull
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=2
spring.datasource.hikari.idle-timeout=30000
spring.datasource.hikari.max-lifetime=1800000

logging.level.org.springframework.security=DEBUG

# Адрес Kafka-брокера (здесь используется контейнер "kafka" из docker-compose)
spring.kafka.bootstrap-servers=kafka:9092

# ========================
# Конфигурация Consumer (Подписчик)
# ========================

# Группа подписчиков, к которой относится этот сервис (LikeService)
spring.kafka.consumer.group-id=like-service-group

# Указывает, что новый consumer начнет чтение с самого старого доступного сообщения (если нет сохраненного смещения)
spring.kafka.consumer.auto-offset-reset=earliest

## Десериализация ключа сообщений (Kafka использует String в качестве ключа)
#spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#
## Десериализация значения сообщений (Kafka использует String в качестве значения)
#spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#
## ========================
## Конфигурация Producer (Отправитель)
## ========================
#
## Сериализация ключа сообщений (Kafka отправляет ключ как строку)
#spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#
## Сериализация значения сообщений (Kafka отправляет значение как строку)
#spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer